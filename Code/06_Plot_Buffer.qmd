---
title: "06. Plot Buffer for Neighborhood Competition"
format:
  html:
    theme: spacelab
    toc: true
    number-sections: true
---

# Setup

```{r}
rm(list = ls())

# Set user path
computer <- "~"

#  directores
if(computer == "~"){
  Dir.Base <- "~/Desktop/Prague/mort-likelihood/individ-tree-mort"
}else{
  Dir.Base <- "insert path"
}
Dir.Data <- file.path(Dir.Base, "Data")
Dir.Code <- file.path(Dir.Base, "Code")
Dir.Clim <- file.path(Dir.Data,"Climate")
Dir.Dist <- file.path(Dir.Data,"Disturbance")
Dir.Out <- file.path(Dir.Base,"Annealing_output")
Dir.Ndep <- file.path(Dir.Data,"Ndep")
Dir.Analysis.Files <- file.path(Dir.Data,"Full_data_files")
dirs <- sapply(c(Dir.Base,Dir.Data,Dir.Code,Dir.Clim,Dir.Dist,Dir.Ndep,Dir.Out,Dir.Analysis.Files), 
               function(x) if(!dir.exists(x)) dir.create(x))

```

```{r}
install.load.package <- function(x) {
  if (!require(x, character.only = TRUE)) {
    install.packages(x, repos = "http://cran.us.r-project.org")
  }
  require(x, character.only = TRUE)
}

sapply(c("RPostgreSQL", "pool", "tidyverse"), install.load.package)
```


```{r}
# Distance function
neighdist <- function(targetx, targety, neighborx, neighbory) {
  sqrt((targetx - neighborx)^2 + (targety - neighbory)^2)
}

# Load neighbor tree data
neighbours_df <- load(file.path(Dir.Data, "full_trees_comp.Rdata"))
neighbours_df <- get(neighbours_df)
neighbours_df$plotid <- as.factor(neighbours_df$plotid)

# Read species table
spp_table <- read_csv(file.path(Dir.Data, "Species_table.csv"))
spp_table <- spp_table[, !names(spp_table) %in% c("Genus_nam", "Species_nam", "functional.grp", "sp_type")]

# Add species code
neighbours_df <- merge(neighbours_df, spp_table, by = "species", all.x = TRUE)
neighbours_df$SPCD <- as.factor(neighbours_df$SPCD)

# Calculate distance to plot center
neighbours_df$DIST_m <- neighdist(neighbours_df$x_m, neighbours_df$y_m, 0, 0)

# Convert DBH to cm
neighbours_df$dbh_cm <- neighbours_df$dbh_mm / 10
neighbours_df <- neighbours_df[, !names(neighbours_df) %in% "dbh_mm"]
```

```{r}
# Connect to database
KELuser <- dbPool(
  RPostgreSQL::PostgreSQL(),
  dbname = "remoteforestsorg",
  host = "91.239.201.14",
  port = 4010,
  user = "remoteforests002",
  password = "COVBtxQ5"
)

# Get plot size info
plotids <- unique(neighbours_df$plotid)

plots <- tbl(KELuser, "plot") %>%
  filter(census == 1, plotid %in% plotids) %>%
  collect() %>%
  select(date, plotid, plotsize)

plots$plotid <- as.factor(plots$plotid)

# Merge with tree data
neighbours_df <- merge(neighbours_df, plots[, -1], by = "plotid", all.x = TRUE)
```


```{r}
pb <- txtProgressBar(min = 0, max = length(unique(neighbours_df$plotid)), style = 3)
tind <- 0
seed_no <- 0

plot_list <- levels(neighbours_df$plotid)
dat_array <- array(data = list(NULL), dim = length(plot_list))

for (i in seq_along(plot_list)) {
  seed_no <- seed_no + 1
  tind <- tind + 1
  setTxtProgressBar(pb, tind)

  plot <- plot_list[i]
  trees_sim <- neighbours_df[neighbours_df$plotid == plot, ]
  trees_sim$treeid <- paste0(trees_sim$treeid, "_sim")

  Rmin <- unique(round(sqrt(trees_sim$plotsize / pi), 2))
  Rmax <- unique(round(sqrt(trees_sim$plotsize * 3 / pi), 2))

  set.seed(20 + seed_no)
  trees_sim$radius <- runif(nrow(trees_sim), min = Rmin, max = Rmax)
  trees_sim$angle_rad <- runif(nrow(trees_sim), min = 0.001, max = 2 * pi)

  trees_sim$x_m_ran <- trees_sim$radius * sin(trees_sim$angle_rad)
  trees_sim$y_m_ran <- trees_sim$radius * cos(trees_sim$angle_rad)

  trees_sim$DIST_m <- neighdist(trees_sim$x_m_ran, trees_sim$y_m_ran, 0, 0)

  dat_array[[i]] <- trees_sim
}

sim_neighbours <- do.call(rbind, dat_array)
```


```{r}
summary(sim_neighbours)

length(unique(sim_neighbours$plotid))  # 212
length(unique(neighbours_df$plotid))   # 212
length(unique(sim_neighbours$treeid))  # 15808
length(unique(neighbours_df$treeid))   # 15808

set.seed(42)
plot_list_sample <- sample(sim_neighbours$plotid, 16)

if (computer == "~") {
  quartz(height = 8, width = 10)
} else {
  windows(height = 8, width = 10)
}

 par(mfrow = c(4, 4), mar = c(2, 2, 2, 1), oma = c(1, 2, 2, 1))

for (index in 1:16) {
  plotid <- plot_list_sample[index]
  plot(y_m_ran ~ x_m_ran, data = sim_neighbours[sim_neighbours$plotid == plotid, ], col = "gray")
  points(y_m ~ x_m, data = neighbours_df[neighbours_df$plotid == plotid, ], col = "blue")
}
```

```{r}
sim_neighbours$x_m <- sim_neighbours$x_m_ran
sim_neighbours$y_m <- sim_neighbours$y_m_ran
sim_neighbours <- sim_neighbours[, !names(sim_neighbours) %in% c("x_m_ran", "y_m_ran", "radius", "angle_rad")]

sim_neighbours$tree_type <- "buffer"
neighbours_df$tree_type <- neighbours_df$treetype

neighbours_df <- rbind(neighbours_df, sim_neighbours)
neighbours_df <- neighbours_df[order(neighbours_df$plotid, neighbours_df$treeid), ]

# Save output
save(neighbours_df, file = file.path(Dir.Data, "10_Neighbour_tree_files.Rdata"))

poolClose(KELuser)
```

# Prep Neighborhood matrix
```{r}
# Minimum target tree DBH
min.target.dbh.cm <- 6
# Minimum neighbour tree DBH
min.neighbour.dbh.cm <- 6
# Maximum radius (m) for neighbours
neighbour_dist_max <- 15
# min sample size of trees for growth analyses
Nmin <- 100 
# number of classes of wood density
k <- 3
####################################

# function to calculate distance
neighdist <- function(targetx, targety, neighborx, neighbory) { 
	                  sqrt((targetx-neighborx)^2 + (targety-neighbory)^2) }

# Status bar
status_bar <- function(title.txt, n, nmax)
{ m <- paste(title.txt, ":", n,"of",nmax,"Completed")
  barplot(height=c(n), width = c(0.25), main = m, xlim = c(0,nmax), ylim = c(0,1), horiz=T)
}

###################################
# get neighbour tree data
load(file=file.path(Dir.Data,"10_Neighbour_tree_files.Rdata"))

# drop trees with missing trait values
unique(neighbours_df[,names(neighbours_df) %in% c("SPCD","wood_density_gcm3","SLA_cm2g_mean")] )
neighbours_df <- subset(neighbours_df, !SPCD %in% c("ANGIO","LIANS","ACEHEL") )  # missing trait values


# load target tree data
# load target tree data
load(file=file.path(Dir.Data,"9_Trees_with_derived_climate_variables.Rdata"))

# Calculate tree distance to plot centre
trees$DIST_m <- neighdist(trees$x_m, trees$y_m, 0, 0)
trees$dbh_cm <- trees$dbh_mm/10


# select focal species with minimum number of samples
spp_list <- sort(table(trees$SPCD),decreasing = TRUE)
top_species <- spp_list[which(spp_list > Nmin)]


###################################
# loop through selected species and collect neighbour data matrices

for(index in 1:length(top_species)) {
  
  spname <- names(top_species[index])
  targets <- subset(trees, SPCD == spname &
                      dbh_cm >= min.target.dbh.cm )
  targets <- droplevels(targets)
  
  # list of plots for this species
  target.plots  <- levels(targets$plotid)
  
  # subset neighbours that are in target plots
  neighbours <- subset(neighbours_df, plotid %in% target.plots)
  
  # Exclude neighbours under the minimum defined neighbour DBH
  neighbours <- subset(neighbours, dbh_cm >= min.neighbour.dbh.cm )
  neighbours <- droplevels(neighbours)
  
  
  #############
  # Add neighbor classification schemes 
  # relatedness (conspecific, congeneric, other); add family?
  
  neighbours$genus <- str_split(neighbours$species, boundary("word"), simplify = T)[,1]  # extract genus
  targets$genus <- str_split(targets$species, boundary("word"), simplify = T)[,1]  
  
  neighbours$relatedness <- ifelse(neighbours$SPCD %in% targets$SPCD, "conspec", 
                                   ifelse(neighbours$genus %in% targets$genus, "congen", "other"))
  neighbours$relatedness <- as.factor(neighbours$relatedness)
  
  # classify neighbours species by clustering trait values
  d <- unique(neighbours[,names(neighbours) %in% c("SPCD","wood_density_gcm3","SLA_cm2g_mean")] )
  d$wood_density_kgm3 <- d$wood_density_gcm3 * 1000
  kmeans.out <- kmeans(d[,c(3:4)], centers=k, nstart=20)
  
  trait_class <- cbind(d,"trait_class"=kmeans.out$cluster)
  trait_class <- trait_class[order(trait_class$trait_class),]
  
  # Check clusters
  quartz(height=6, width=6)
  plot(SLA_cm2g_mean ~ wood_density_kgm3, data=d, col=(kmeans.out$cluster+1), xlab="Wood density (kg/m3)", ylab="SLA (cm2/g)", 
       pch=20, cex=2, las=1, main=paste0("focal = ",spname))
  
  # add clusters to neighbours file
  neighbours <- merge(neighbours, trait_class, by=c("SPCD", "wood_density_gcm3", "SLA_cm2g_mean"),all.x=T)
  neighbours$trait_class <- as.factor(neighbours$trait_class)
  
  #############
  # generate matrices of species, distances and dbhs for neighbours
  quartz(height=2.5, width=9)
  par(mfrow=c(1,1))
  
  # determine maximum number of neighbours for a target tree
  max.neighbours <- 0
  for (m in 1:nrow(targets))
  { 
    max.neighbours <- max(max.neighbours, 
                          nrow(subset(neighbours, plotid %in% targets$plotid[m])) )
    status_bar(paste("Calculating max neighbours for species", spname), m, nrow(targets))
  }
  # initialize matices
  distances <- matrix(0, nrow=nrow(targets), ncol=max.neighbours)
  dbhs <- matrix(0, nrow=nrow(targets), ncol=max.neighbours)
  species <- matrix(0, nrow=nrow(targets), ncol=max.neighbours)
  trait_clust <- matrix(0, nrow=nrow(targets), ncol=max.neighbours)
  
  # populate matrices
  quartz(height=2.5, width=9)
  for(i in 1:nrow(targets)) 
  { neighbours.for.tree <- subset(neighbours, neighbours$plotid %in% targets$plotid[i] )
  
  if(nrow(neighbours.for.tree) > 0) {
    distances[i,1:nrow(neighbours.for.tree)] <- neighdist(targets$x_m[i], targets$y_m[i], # using distance function                 
                                                          neighbours.for.tree$x_m, neighbours.for.tree$y_m)                                                
    dbhs[i,1:nrow(neighbours.for.tree)] <- neighbours.for.tree$dbh_cm     
    species[i,1:nrow(neighbours.for.tree)] <- neighbours.for.tree$relatedness
    trait_clust[i,1:nrow(neighbours.for.tree)] <- neighbours.for.tree$trait_class
  }
  status_bar(paste("Populating neighbour matrices for", spname), i, nrow(targets))
  }
  
  # convert dbhs to meters for derivation of competition index
  dbhs <- dbhs/100.0
  
  # Replace zeros with NA
  distances <- ifelse(distances == 0, NA, distances)
  dbhs[which(distances %in% NA)] <- NA
  distances[which(dbhs %in% NA)] <- NA
  species[which(dbhs %in% NA)] <- NA
  trait_clust[which(dbhs %in% NA)] <- NA
  
  # Exclude neighbours beyond a maximum distance of a target
  for (i in 1:nrow(distances))
  { too_far <- which(distances[i,] > neighbour_dist_max)
  distances[i,too_far] <- NA
  dbhs[i,too_far] <- NA
  species[i,too_far] <- NA
  trait_clust[i,too_far] <- NA
  }
  colnames(dbhs) <- rep("NDBH", ncol(dbhs))
  colnames(distances) <- rep("NDIST", ncol(dbhs))
  colnames(species) <- rep("NSPP", ncol(dbhs))
  colnames(trait_clust) <- rep("NTR", ncol(dbhs))
  
  # get number of larger neighbours relative to focal tree (as a simple competition index)
  nd <- rowSums(dbhs > (targets$dbh_cm/100),na.rm=T)
  
  # size ratio = average dbh of all neighbours / dbh target (Canham and Murphy 2017)
  targets$size_ratio <- rowMeans((dbhs/2)^2, na.rm=T) / (((targets$dbh_cm)/200)^2)  # dbhs are in meters
  
  # save
  setwd(Dir.Analysis.Files)
  save(targets,neighbours,distances,dbhs,species,trait_clust,nd,trait_class,kmeans.out,
       file=paste(spname,"Full_working_dataset_with_all_climate_variables.Rdata",sep="_"))
  
} # species loop

```

```{r}
# Calculate NCI for each individual 
	
	# focal species
	spp_list <- c("ABIALB","FAGSYL","PICABI","ACEPSE")
	
	# select focal species
	index <- 2
	spname <- spp_list[index]
	
	# get model fitting data including neighbour matrices from step 11
	filename <- "Full_working_dataset_with_all_climate_variables.Rdata"
	load(file=file.path(Dir.Analysis.Files, paste(spname,filename,sep="_")))
	
	
	# compute NCI assuming alpha = 2 beta = 1
	alpha = 2
	beta = 1
	targets$NCI <- rowSums((dbhs^alpha)/(distances^beta), na.rm=T)
	targets$NCI_norm <- targets$NCI / max(targets$NCI)               #  normalize NCI I should merge all data and then normalize
	targets$NCI_negexp <- exp(-1 * targets$size_ratio * targets$NCI/max(targets$NCI ))  #  NCI fit to exponential function
	targets$BA_m2_15m <- rowSums((pi*(dbhs/2)^2), na.rm=T)   # sum of neighbour basal area within 15 m
	
	summary(targets)

	
# List of focal species
spp_list <- c("ABIALB", "FAGSYL", "PICABI", "ACEPSE")
filename <- "Full_working_dataset_with_all_climate_variables.Rdata"

# Placeholder for all species data
all_targets <- data.frame()

# Loop through each species
for (spname in spp_list) {
  
  # Load the data
  load(file = file.path(Dir.Analysis.Files, paste(spname, filename, sep = "_")))
  
  # Parameters for NCI
  alpha <- 2
  beta <- 1
  
  # Compute NCI and basal area
  targets$NCI <- rowSums((dbhs^alpha) / (distances^beta), na.rm = TRUE)
  	targets$NCI_norm <- targets$NCI / max(targets$NCI)               #  normalize NCI I should merge all data and then normalize
	targets$NCI_negexp <- exp(-1 * targets$size_ratio * targets$NCI/max(targets$NCI ))  #  NCI fit to exponential function
  targets$BA_m2_15m <- rowSums((pi * (dbhs / 2)^2), na.rm = TRUE)
  
  # Add species identifier
  targets$species <- spname
  
  # Combine into the master dataset
  all_targets <- rbind(all_targets, targets)
}

# # Normalize NCI across all species
# all_targets$NCI_norm <- all_targets$NCI / max(all_targets$NCI, na.rm = TRUE)
# 
# # Exponential decay using normalized NCI and size_ratio
# all_targets$NCI_negexp <- exp(-1 * all_targets$size_ratio * all_targets$NCI_norm)

# View summary
summary(all_targets)

# Optional: save to file

save(all_targets, file=file.path(Dir.Data, "11_Combined_Targets_with_NCI.Rdata"))
```

