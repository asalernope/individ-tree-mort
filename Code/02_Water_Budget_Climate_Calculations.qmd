---
title: "02. Prepare water budget and climate and soil variables"
format:
  html:
    theme: spacelab
    toc: true
    number-sections: true
---

# Objective

    - Prepare climate and soil data for water balance input & convert temperature in Kelvin

# Set up 

```{r}
rm(list=ls())

#  set user computer
computer <- "~"

#  directores
if(computer == "~"){
  Dir.Base <- "~/Desktop/Prague/mort-likelihood"
}else{
  Dir.Base <- "insert path"
}

Dir.Data <- file.path(Dir.Base, "Data")
Dir.Code <- file.path(Dir.Base, "Code")
Dir.Clim <- file.path(Dir.Data,"Climate")
dirs <- sapply(c(Dir.Base, Dir.Data, Dir.Code, Dir.Clim), function(x) if(!dir.exists(x)) dir.create(x))

library(reshape2)
library(tidyverse)
```


# Soil moisture index calculation

    - Following Gao et al., 2016. Assessing various drought indicators in representing summer drought in boreal forests in Finland. Hydrology and Earth System Sciences, 20(1), pp.175-191.

*Function to compute soil moisture index*
```{r}
### function to compute soil moisture index 
smi <- function(qsoil,wilt,sat) { (qsoil-wilt) / (sat-wilt) }  # soil moisture index (SMI)
```

# Load Soil & Climate data

```{r}
### load plot soil AWC
load(file=file.path(Dir.Data,"A3_Plots_with_soil_AWC.Rdata"))
summary(plot_soil)

### load climate data
plot_clim <- load(file=file.path(Dir.Clim,"2_Plot_terra_climate_compiled_by_month_1970_to_2023.Rdata"))
plot_clim <- get(plot_clim)
rm(plot_clim_array)

summary(plot_clim)
which(duplicated(plot_clim))

# get monthly mean temp in kelvin
plot_clim$temp_mean_K <- ((plot_clim$tmax + plot_clim$tmin) / 2) + 273.15

# normalize soil moisture data using smi function
plot_clim$SMI <- smi(plot_clim$soil_mm, min(plot_clim$soil_mm), max(plot_clim$soil_mm) )
```

# Climate Processing
```{r}
# Convert numeric month to abbreviated name
months <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
plot_clim$Month <- months[plot_clim$month]

# climate variables to process
Vars <- c("pet","ppt","temp_mean_K","SMI", "PDSI", "ws", "def")


### convert from long to wide format
index <- 1
for(index in 1:length(Vars))
{
  clim_var <- Vars[index]
  
  # Cast to wide format
  plot_clim_wide <- subset(plot_clim, select=c("plotid","year","Month",clim_var))
  plot_clim_wide <- dcast(plotid+year ~ Month, data=plot_clim_wide, value.var=clim_var)
  
  
  # Order columns
  plot_clim_wide <- subset(plot_clim_wide, select=c("plotid","year",months))
  
  # Rename columns
  new_nam <- paste(months,clim_var,sep="_")
  colnames(plot_clim_wide)[3:length(plot_clim_wide)] <- new_nam
  head(plot_clim_wide)
  
  # combine variables
  if(index == 1) 
  {
    df <- plot_clim_wide
  }else{
    df <- merge(df, plot_clim_wide, by=c("plotid","year"))
  }
}

# add soil AWC
plot_soil$plotid <- as.factor(plot_soil$plotid)

# add awc values
awc <-  plot_soil[,names(plot_soil) %in% c("plotid","AWC_mm_per_m2")]

df <- merge(df, awc, by="plotid", all.x=TRUE)
which(duplicated(df))
```

# Save
```{r}
### save
save(df, file=file.path(Dir.Clim,"3_Working_climate_and_soil_variables.Rdata"))
```

# Water Budget Calculation

*Load data*
```{r}
load(file=file.path(Dir.Clim,"3_Working_climate_and_soil_variables.Rdata"))
```

## Calculate plot soil moisture for the end of each month
    - sms.t1 = sms.t0 + precip.t1 - pet.t1
    - ppt and pet are in units of mm
```{r}
# Define matrix for storage of monthly soil moisture calculations
monthly_sms <- matrix(NA, nrow=nrow(df), ncol=12)
colnames(monthly_sms) <- paste(months, "sms", sep=".")

# index for precip
precip_base <- 14  # January = column 15

# index for columns containing PET
pet_base <- 2  # January = column 3

# Get available water storage for all plots
aws <- df$AWC_mm_per_m   

# January soil moisture: aws + precip[i] - pet[i], since soil is saturated on last day of the year
# pmin and pmax bound the answer between 0 and AWS
monthly_sms[,1] <- pmax(pmin(aws + df[,(precip_base+1)] - df[,(pet_base+1)], aws),0)


### Feb - Nov soil moisture: sms[i-1] + precip[i] - pet[i]
for (i in 2:11) 
{  monthly_sms[,i] <- pmax(pmin(monthly_sms[,i-1] + df[,(precip_base+i)] - df[,(pet_base+i)], aws),0)
}

# December soil moisture: AWS
monthly_sms[,12] <- aws 

# combine variables
df <- cbind(df, monthly_sms)
```


## Calculate AET summed across months

    SMt1 = SMt0 + precip.t1 - PETt1
    if SMt1 > 0, AETt1 = PETt1 
    if SMt1 = 0, AETt1 = SMt0 + precip.t1

  *since soil is saturated at end of year, jan and dec AET = PET by definition

```{r}
# Calculate monthly AET
df$Jan_aet <- df[,pet_base+1]
df$Feb_aet <- ifelse(monthly_sms[,2]> 0,df[,pet_base+2],
                     monthly_sms[,1] + df[,precip_base+2])
df$Mar_aet <- ifelse(monthly_sms[,3]> 0,df[,pet_base+3],
                     monthly_sms[,2] + df[,precip_base+3])
df$Apr_aet <- ifelse(monthly_sms[,4]> 0,df[,pet_base+4],
                     monthly_sms[,3] + df[,precip_base+4])
df$May_aet <- ifelse(monthly_sms[,5]> 0,df[,pet_base+5],
                     monthly_sms[,4] + df[,precip_base+5])
df$Jun_aet <- ifelse(monthly_sms[,6]> 0,df[,pet_base+6],
                     monthly_sms[,5] + df[,precip_base+6])
df$Jul_aet <- ifelse(monthly_sms[,7]> 0,df[,pet_base+7],
                     monthly_sms[,6] + df[,precip_base+7])
df$Aug_aet <- ifelse(monthly_sms[,8]> 0,df[,pet_base+8],
                     monthly_sms[,7] + df[,precip_base+8])
df$Sep_aet <- ifelse(monthly_sms[,9]> 0,df[,pet_base+9],
                     monthly_sms[,8] + df[,precip_base+9])
df$Oct_aet <- ifelse(monthly_sms[,10]> 0,df[,pet_base+10],
                     monthly_sms[,9] + df[,precip_base+10])
df$Nov_aet <- ifelse(monthly_sms[,11]> 0,df[,pet_base+11],
                     monthly_sms[,10] + df[,precip_base+11])
df$Dec_aet <- df[,pet_base+12]

# # Create AET columns
# df <- df %>%
#   bind_cols(
#     map2_dfc(1:12, months, function(i, mon) {
#       aet <- if (i == 1 || i == 12) {
#         df[[pet_base + i]]
#       } else {
#         ifelse(monthly_sms[, i] > 0,
#                df[[pet_base + i]],
#                monthly_sms[, i - 1] + df[[precip_base + i]])
#       }
#       tibble(!!paste0(mon, "_aet") := aet)
#     })
#   )

```

# Seasonal and Annual Variable Calculations
```{r}
### calculate annual and seasonal variables
### water deficit (WD = PET - AET)
ind1 <- which(colnames(df) == "Jan_aet")
ind2 <- which(colnames(df) == "Dec_aet")
df$aet_ann_mm <- rowSums(df[,ind1:ind2])

ind1 <- which(colnames(df) == "Jan_pet")
ind2 <- which(colnames(df) == "Dec_pet")
df$pet_ann_mm <- rowSums(df[,ind1:ind2])

df$WD_mm_ann <- round((df$pet_ann_mm - df$aet_ann_mm), 3)


### growing season water deficit
ind1 <- which(colnames(df) == "Apr_aet")
ind2 <- which(colnames(df) == "Aug_aet")
df$aet_seasonal_mm <- rowSums(df[,ind1:ind2])

ind1 <- which(colnames(df) == "Apr_pet")
ind2 <- which(colnames(df) == "Aug_pet")
df$pet_seasonal_mm <- rowSums(df[,ind1:ind2])

df$WD_mm_seasonal <- round((df$pet_seasonal_mm - df$aet_seasonal_mm),3)

### calculate annual and seasonal variables - terra
### water deficit (WD = PET - AET)

ind1 <- which(colnames(df) == "Jan_def")
ind2 <- which(colnames(df) == "Dec_def")

df$terra_WD_mm_ann <- round(rowSums(df[,ind1:ind2]), 3)

ind1 <- which(colnames(df) == "Apr_def")
ind2 <- which(colnames(df) == "Aug_def")

df$terra_WD_mm_seasonal <- round(rowSums(df[,ind1:ind2]), 3)


### annual total precip
ind1 <- which(colnames(df) == "Jan_ppt")
ind2 <- which(colnames(df) == "Dec_ppt")
df$ppt_mm_ann_sum <- round(rowSums(df[,ind1:ind2]),3)

### growing season total precip
ind1 <- which(colnames(df) == "Apr_ppt")
ind2 <- which(colnames(df) == "Aug_ppt")
df$ppt_mm_seasonal_sum <- round(rowSums(df[,ind1:ind2]),3)

# min monthly precip during growing season
df$ppt_mm_seasonal_month_min <- round(apply(df[,ind1:ind2],1,function(x) min(x)), 3)

###  total WB
df$WB_mm_seasonal <- round((df$ppt_mm_seasonal_sum - df$pet_seasonal_mm),3)
df$WB_mm_ann <- round((df$ppt_mm_ann_sum - df$pet_ann_mm),3)

### annual mean temperature
ind1 <- which(colnames(df) == "Jan_temp_mean_K")
ind2 <- which(colnames(df) == "Dec_temp_mean_K")
df$temp_K_ann_ave <- round(rowMeans(df[,ind1:ind2]),3)


### growing season mean temperature
ind1 <- which(colnames(df) == "Apr_temp_mean_K")
ind2 <- which(colnames(df) == "Aug_temp_mean_K")
df$temp_K_seasonal_ave <- round(rowMeans(df[,ind1:ind2]),3)

# maximum monthly temp during growing season
df$temp_K_seasonal_month_max <- round(apply(df[,ind1:ind2],1,function(x)max(x)), 3)


### growing season mean soil moisture index
ind1 <- which(colnames(df) == "Apr_SMI")
ind2 <- which(colnames(df) == "Aug_SMI")
df$SMI_seasonal_ave <- round(rowMeans(df[,ind1:ind2]),3)

# min monthly moisture during growing season
df$SMI_seasonal_month_min <- round(apply(df[,ind1:ind2],1,function(x)min(x)), 3)
```

# Save
```{r}
#summary(df)

##### save
monthly_sm_df <- df
save(monthly_sm_df,file=file.path(Dir.Clim,"4_plot_monthly_water_budget_variables.Rdata"))
```

# Effect Seasonal Water Supply

# Load Data
```{r}
load(file=file.path(Dir.Clim,"4_plot_monthly_water_budget_variables.Rdata"))
# summary(monthly_sm_df)
```

#################################################################
#   Effective seasonal water supply ("water_balance_seasonal_mm")
#   defined as soil water storage, plus precip during 
#   growing season
#   - use balance between PET and PPT to define growing season
#   i.e. sum precip during months when PET >= PPT,
#   plus PET when PET < PPT,  and add to
#   that the available water storage
#################################################################

#  columns of monthly_sm_df containing
#    PET: 3:14
#    precip: 15:26
```{r}
monthly_sm_df$water_balance_seasonal_mm <- monthly_sm_df$AWC_mm_per_m

# sum precip & AWC during months when PET >= PPT
for (i in 1:12)
{  monthly_sm_df$water_balance_seasonal_mm <- ifelse(monthly_sm_df[,2+i] >= monthly_sm_df[,14+i],
                                                     monthly_sm_df$water_balance_seasonal_mm + monthly_sm_df[,14+i],
                                                     monthly_sm_df$water_balance_seasonal_mm)
}

#  add in PET during months when PET < PPT (on assumption that precip will replenish PET)
for (i in 1:12)
{  monthly_sm_df$water_balance_seasonal_mm <- ifelse(monthly_sm_df[,2+i] < monthly_sm_df[,14+i],
                                                     monthly_sm_df$water_balance_seasonal_mm + monthly_sm_df[,2+i],
                                                     monthly_sm_df$water_balance_seasonal_mm)
}


```

```{r}
####
save(monthly_sm_df,file=file.path(Dir.Clim,"5_plot_monthly_water_budget_variables.Rdata"))
```

```{r}
ref_clim <- plot_clim %>%
  filter(year >= 1970, year < 2000,
         Month %in% c("Apr", "May", "Jun", "Jul", "Aug")) %>%
  group_by(plotid, Month) %>%
  summarise(
    ref_def = mean(def, na.rm = TRUE),
    ref_rain = mean(ppt, na.rm = TRUE),
    ref_temp = mean(tmax, na.rm = TRUE)
  )

clim_anom <- plot_clim %>%
  inner_join(., survey_dates, by = "plotid") %>%
  filter(year >= (date_census_1-5), year <= date_census_2,    
         Month %in% c("Apr", "May", "Jun", "Jul", "Aug")) %>%
  left_join(ref_clim, by = c("Month","plotid")) %>%
  mutate(
    temp_anom = tmax - ref_temp, # if positive, then current tmax is higher than historical reference tmax
    rain_anom = ppt - ref_rain, # if negative, then historical precip is higher than historical ref precip 
    def_anom = def - ref_def) %>% #if positive, then current def higher than historical reference def
  group_by(plotid,year) %>%
    summarise(
      ref_def_seas = sum(ref_def),
      ref_rain_seas = sum(ref_rain),
      ref_temp_seas = mean(ref_temp),
      temp_anom_mean = mean(temp_anom),
      rain_anom_sum = sum(rain_anom),
      def_anom_sum = sum(def_anom)) %>%
  ungroup() %>%
  group_by(plotid) %>%
    summarise(
      ref_def_mean = mean(ref_def_seas),
      ref_rain_mean = mean(ref_rain_seas),
      ref_temp_mean = mean(ref_temp_seas),
      temp_anom = mean(temp_anom_mean),
      rain_anom = mean(rain_anom_sum),
      def_anom = mean(def_anom_sum),
#if positive, then current def higher than historical reference def
    T_Evo = ref_temp_mean * temp_anom,
    def_Evo = def_anom / ref_def_mean,
    P_Evo = rain_anom / ref_rain_mean)
  
save(clim_anom,file=file.path(Dir.Clim,"TRY_climate_anom.Rdata"))

load(file=file.path(Dir.Clim,"TRY_climate_anom.Rdata"))


```


